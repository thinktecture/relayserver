x-defaults: &defaults
  networks:
    - relayserver

x-rabbit-defaults: &rabbit-defaults
  <<: *defaults
  image: rabbitmq:management-alpine
  secrets:
    - source: erlang-cookie
      target: /var/lib/rabbitmq/.erlang.cookie
      mode: 0600
x-rabbit-env: &rabbit-env
  RABBITMQ_DEFAULT_USER: guest
  RABBITMQ_DEFAULT_PASS: guest
  RABBITMQ_SERVER_START_ARGS: -rabbit cluster_nodes {['rabbit@relay_transport_rabbitmq1','rabbit@relay_transport_rabbitmq2'],disc} cluster_name rabbit@relay_transport

x-db-connection: &db-connection
  DatabaseType: ${RELAYSERVER_DATABASE_TYPE:-PostgreSql} # PostgreSql or SqlServer
  ConnectionStrings__PostgreSql: host=relay_persistence_postgresql;database=relayserver;username=relayserver;password=<Strong!Passw0rd>
  ConnectionStrings__SqlServer: Server=relay_persistence_sqlserver;Database=relayserver;User Id=sa;Password=<Strong!Passw0rd>

x-logging: &logging
  Serilog__MinimumLevel__Default: Verbose
  Serilog__MinimumLevel__Override__Microsoft: Warning
  Serilog__MinimumLevel__Override__System: Warning
  Serilog__WriteTo__0__Name: Seq
  Serilog__WriteTo__0__Args__ServerUrl: http://relay_logging_seq

secrets:
  erlang-cookie:
    environment: RABBITMQ_ERLANG_COOKIE

services:
  relay_transport_rabbitmq1:
    <<: *rabbit-defaults
    container_name: relay_transport_rabbitmq1
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      <<: *rabbit-env
      RABBITMQ_NODENAME: rabbit@relay_transport_rabbitmq1
  relay_transport_rabbitmq2:
    <<: *rabbit-defaults
    container_name: relay_transport_rabbitmq2
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      <<: *rabbit-env
      RABBITMQ_NODENAME: rabbit@relay_transport_rabbitmq2

  relay_logging_seq:
    <<: *defaults
    image: datalust/seq
    container_name: relay_logging_seq
    ports:
      - "5341:80"
    environment:
      ACCEPT_EULA: Y
    volumes:
      - seq-data:/data

  relay_persistence_postgresql:
    <<: *defaults
    image: postgres:15-alpine
    container_name: relay_persistence_postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: relayserver
      POSTGRES_PASSWORD: <Strong!Passw0rd>
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL", "pg_isready", "-d", "db_prod"
        ]
      interval: 10s
      timeout: 60s
      retries: 10
      start_period: 10s
  relay_persistence_sqlserver:
    <<: *defaults
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: relay_persistence_sqlserver
    user: root
    platform: linux/amd64
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: <Strong!Passw0rd>
      MSSQL_PID: Express
    volumes:
      - sqlserver-data:/var/opt/mssql/data
    healthcheck:
      test:
        [
          "CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P '<Strong!Passw0rd>' -Q 'SELECT 1' || exit 1"
        ]
      interval: 10s
      timeout: 60s
      retries: 10
      start_period: 10s
  relay_server_migrations:
    <<: *defaults
    image: relay_server
    build:
      context: ..
      dockerfile: ./docker/Thinktecture.Relay.Server.Docker/Dockerfile
    container_name: relay_server_migrations
    environment:
      <<: [*db-connection, *logging]
      Serilog__Properties__System: Migration
    depends_on:
      relay_persistence_postgresql:
        condition: service_healthy
      relay_persistence_sqlserver:
        condition: service_healthy
    entrypoint: ["dotnet", "Thinktecture.Relay.Server.Docker.dll", "migrate-only=true"]

  relay_management:
    <<: *defaults
    image: relay_management
    build:
      context: ..
      dockerfile: ./docker/Thinktecture.Relay.ManagementApi.Docker/Dockerfile
    container_name: relay_management
    ports:
      - "5004:5000"
    environment:
      <<: [*db-connection, *logging]
    depends_on:
      - relay_server_migrations

  relay_tenant_seed:
    <<: *defaults
    image: curlimages/curl
    container_name: relay_tenant_seed
    depends_on:
      - relay_server_migrations
      - relay_management
    command: [ "sh", "-c", "sleep 5 && curl -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Api-Key: write-key\" --data-raw '{ \"name\": \"TestTenant1\", \"credentials\": [{ \"plainTextValue\": \"<Strong!Passw0rd>\" }]}' http://relay_management:5000/management/tenants && curl -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Api-Key: write-key\" --data-raw '{ \"name\": \"TestTenant2\", \"credentials\": [{ \"plainTextValue\": \"<Strong!Passw0rd>\" }]}' http://relay_management:5000/management/tenants" ]

  relay_identityprovider:
    <<: *defaults
    image: quay.io/keycloak/keycloak:24.0
    container_name: relayidentityprovider # this should also be named relay_identityprovider, but Keycloak does not support underscores in host names ðŸ¤¦ See https://stackoverflow.com/a/76991211/199861
    ports:
      - "5002:5002"
    volumes:
      - ./keycloak_data:/opt/keycloak/data/import
    environment:
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_HEALTH_ENABLED: true
        KC_METRICS_ENABLED: true
        KC_HOSTNAME_DEBUG: true
    command: [ "start-dev", "--http-port=5002", "--import-realm" ]

  relay_server_a:
    <<: *defaults
    image: relay_server
    container_name: relay_server_a
    ports:
      - "5010:5000"
    environment:
      <<: [*db-connection, *logging]
      Serilog__Properties__System: RelayServerA
      RabbitMq__Uri: amqp://guest:guest@relay_transport_rabbitmq1
    volumes:
      - relay-bodystore:/var/bodystore
    depends_on:
      - relay_server_migrations
      - relay_identityprovider
  relay_server_b:
    <<: *defaults
    image: relay_server
    container_name: relay_server_b
    ports:
      - "5011:5000"
    environment:
      <<: [*db-connection, *logging]
      Serilog__Properties__System: RelayServerB
      RabbitMq__Uri: amqp://guest:guest@relay_transport_rabbitmq2
    volumes:
      - relay-bodystore:/var/bodystore
    depends_on:
      - relay_server_migrations
      - relay_identityprovider

  relay_connector_a1:
    <<: *defaults
    image: relay_connector
    build:
      context: ..
      dockerfile: ./docker/Thinktecture.Relay.Connector.Docker/Dockerfile
    container_name: relay_connector_a1
    environment:
      <<: *logging
      Serilog__Properties__System: Connector_A1
      RelayConnector__RelayServerBaseUri: http://relay_server_a:5000
      RelayConnector__TenantName: TestTenant1
    depends_on:
      - relay_server_a
  relay_connector_a2:
    <<: *defaults
    image: relay_connector
    container_name: relay_connector_a2
    environment:
      <<: *logging
      Serilog__Properties__System: Connector_A2
      RelayConnector__RelayServerBaseUri: http://relay_server_a:5000
      RelayConnector__TenantName: TestTenant1
    depends_on:
      - relay_connector_a1

  relay_connector_b1:
    <<: *defaults
    image: relay_connector
    container_name: relay_connector_b1
    environment:
      <<: *logging
      Serilog__Properties__System: Connector_B1
      RelayConnector__RelayServerBaseUri: http://relay_server_b:5000
      RelayConnector__TenantName: TestTenant2
    depends_on:
      - relay_server_b
  relay_connector_b2:
    <<: *defaults
    image: relay_connector
    container_name: relay_connector_b2
    environment:
      <<: *logging
      Serilog__Properties__System: Connector_B2
      RelayConnector__RelayServerBaseUri: http://relay_server_b:5000
      RelayConnector__TenantName: TestTenant2
    depends_on:
      - relay_connector_b1

volumes:
  seq-data:
  postgresql-data:
  sqlserver-data:
  relay-bodystore:

networks:
  relayserver:
    driver: bridge
    name: relayserver
